Паттерн Decorator (Декоратор) является структурным паттерном проектирования, который позволяет динамически добавлять новые функциональные возможности объектам.
Он предоставляет гибкую альтернативу наследованию для расширения функциональности объектов.

Принцип работы паттерна Decorator следующий:

1. Developer - Определение общего интерфейса: Это интерфейс или абстрактный класс, который определяет общие операции, которые могут быть выполнены над объектами.
2. DeveloperDecorator - Создание базового класса: Это базовый класс, который реализует общий интерфейс и предоставляет базовую функциональность.
3. Создание декораторов: Декораторы наследуются от общего интерфейса или базового класса и добавляют дополнительную функциональность. Они содержат ссылку
    на объект того же интерфейса или класса и делегируют вызовы операций объекту.
4. Композиция объектов: Объекты могут быть композированы в цепочку декораторов, где каждый декоратор оборачивает предыдущий объект, добавляя свою функциональность.
5. Клиентский код: Клиентский код может создавать объекты декораторов и использовать их для добавления новых функций к базовым объектам. Клиент не обязан знать о
    конкретных классах декораторов, так как они соответствуют общему интерфейсу или классу.

Паттерн Decorator позволяет добавлять функциональность объектам на лету, без необходимости изменения их исходного кода. Он также обеспечивает гибкую композицию
объектов, позволяя создавать различные комбинации декораторов. Это особенно полезно, когда требуется добавить функциональность к объектам во время выполнения или
когда есть несколько вариантов функциональности, которые могут быть комбинированы по выбору клиента.